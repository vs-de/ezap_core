#!/usr/bin/env ruby
require 'ezap_core'

  #//TODO: ezap (g)enerate <service> <name>
  #//TODO: ezap (g)enerate <web_app> <controller|view> <name>
  #//TODO: ezap (i)nstall [args]

module EzapExec
  
  module CM
    
    def start(*args, type: nil, name: nil)
      puts args.inspect
      unless name #should be same as type || name
        if args.first == 'fg'
          Ezap::Service::GlobalMaster.start(daemonize: false)
        else
          Ezap::Service::GlobalMaster.start
        end
      end
    end

    def run_expression *args
      eval args.join(" ")
    end

    def stop name=nil
      Ezap::Service::GlobalMaster.shutdown
    end

    def gm_ping
      puts [Ezap::Service::GlobalMaster.ping].flatten.first
    end

    def help *args
      puts help_msg
    end

    def run_console *args
      
      require 'irb'
      #exec 'irb -r $EZAP_ROOT/lib/console_defs.rb'
      require 'console_defs'
      ARGV.clear
      IRB.start
      puts "goodbye"
    end

    def help_msg
<<HELP

  << -- e z a p -- >>

usage:
  ezap (s)tart [<service|web_app>] name]
  ezap stop/(h)alt [service]
  ezap (r)un <file/args to 'ruby'>
  ezap (e)val <ruby-expression>
  ezap (c)onsole
  ezap gm_ping(/gmp)
  ezap help

HELP
    end


  end

  extend CM
end

EE = EzapExec
args = ARGV.clone
case args.shift
  when 's', 'start'
    EE.start *args
  when 'h',' halt', 'stop'
    EE.stop *args
  when 'c', 'console'
    EE.run_console *args
  when 'e', 'eval'
    EE.run_expression *args
  when 'help'
    EE.help *args
  when 'gmp', 'gm_ping'
    EE.gm_ping
  else
    $stderr.puts "unrecognized args"
    EE.help *args
end
